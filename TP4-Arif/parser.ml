type token =
  | CONST_INT of (int)
  | CONST_UNIT
  | EOF
  | EOI
  | IDENT of (string)
  | LPAREN
  | MINUS
  | PLUS
  | PRINT_INT
  | PRINT_NEWLINE
  | RPAREN
  | SLASH
  | STAR
  | IF
  | THEN
  | ELSE
  | NOT
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | UMINUS
  | TRUE
  | FALSE
  | LET
  | IN
  | AFFECT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

  open Ast

  (* Fonction pour aider Ã  la localisation des erreurs. *)
  let current_pos () =
    Parsing.symbol_start_pos (),
    Parsing.symbol_end_pos ()

  (* Fonction de construction d'un [node_expr], qui renseigne correctement
     la localisation de l'expression. *)
  let mk_node e = { expr = e; pos = current_pos() }

# 50 "parser.ml"
let yytransl_const = [|
  258 (* CONST_UNIT *);
    0 (* EOF *);
  259 (* EOI *);
  261 (* LPAREN *);
  262 (* MINUS *);
  263 (* PLUS *);
  264 (* PRINT_INT *);
  265 (* PRINT_NEWLINE *);
  266 (* RPAREN *);
  267 (* SLASH *);
  268 (* STAR *);
  269 (* IF *);
  270 (* THEN *);
  271 (* ELSE *);
  272 (* NOT *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LT *);
  276 (* LE *);
  277 (* GT *);
  278 (* GE *);
  279 (* AND *);
  280 (* OR *);
  281 (* UMINUS *);
  282 (* TRUE *);
  283 (* FALSE *);
  284 (* LET *);
  285 (* IN *);
  286 (* AFFECT *);
    0|]

let yytransl_block = [|
  257 (* CONST_INT *);
  260 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\005\000\001\000\002\000\002\000\
\001\000\001\000\001\000\001\000\003\000\002\000\003\000\003\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\001\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\010\000\009\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\012\000\000\000\031\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\003\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\018\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\017\000\018\000\019\000"

let yysindex = "\014\000\
\043\255\000\000\000\000\000\000\000\000\071\255\071\255\071\255\
\071\255\071\255\071\255\000\000\000\000\012\255\000\000\017\000\
\043\255\170\000\000\000\014\255\189\000\251\254\246\000\000\000\
\000\000\208\000\002\255\246\254\000\000\000\000\000\000\071\255\
\071\255\071\255\071\255\071\255\071\255\071\255\071\255\071\255\
\071\255\071\255\071\255\247\254\000\000\071\255\071\255\251\254\
\251\254\000\000\000\000\026\001\026\001\002\255\002\255\002\255\
\002\255\009\001\009\001\071\255\227\000\217\255\146\000\071\255\
\000\000\071\255\246\000\246\000"

let yyrindex = "\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\145\255\000\000\097\255\
\121\255\000\000\239\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\169\255\
\193\255\000\000\000\000\093\000\109\000\005\000\027\000\049\000\
\071\000\125\000\127\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\255\052\255"

let yygindex = "\000\000\
\000\000\008\000\000\000\250\255\002\000"

let yytablesize = 560
let yytable = "\021\000\
\022\000\023\000\023\000\026\000\027\000\034\000\035\000\032\000\
\033\000\024\000\025\000\028\000\034\000\035\000\001\000\028\000\
\029\000\044\000\028\000\047\000\060\000\002\000\028\000\028\000\
\030\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\028\000\000\000\061\000\
\062\000\000\000\000\000\003\000\004\000\000\000\005\000\006\000\
\007\000\000\000\008\000\009\000\000\000\063\000\030\000\010\000\
\000\000\067\000\011\000\068\000\000\000\030\000\000\000\000\000\
\000\000\030\000\030\000\000\000\012\000\013\000\014\000\003\000\
\004\000\000\000\005\000\006\000\007\000\000\000\008\000\009\000\
\030\000\000\000\000\000\010\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\013\000\020\000\008\000\000\000\000\000\006\000\006\000\
\000\000\000\000\008\000\006\000\006\000\000\000\008\000\008\000\
\000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\000\000\000\000\007\000\000\000\008\000\006\000\006\000\
\000\000\000\000\007\000\006\000\006\000\000\000\007\000\007\000\
\000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\000\000\000\000\014\000\000\000\007\000\014\000\014\000\
\000\000\000\000\014\000\000\000\000\000\000\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\000\000\016\000\000\000\014\000\016\000\016\000\
\000\000\000\000\016\000\000\000\000\000\000\000\016\000\016\000\
\000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\000\000\015\000\000\000\016\000\015\000\015\000\
\000\000\000\000\015\000\000\000\000\000\000\000\015\000\015\000\
\000\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\000\000\000\000\065\000\000\000\015\000\032\000\033\000\
\000\000\000\000\000\000\034\000\035\000\000\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\019\000\000\000\000\000\000\000\066\000\000\000\000\000\
\019\000\000\000\000\000\000\000\019\000\019\000\000\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\022\000\
\000\000\000\000\000\000\019\000\000\000\000\000\022\000\000\000\
\000\000\000\000\022\000\022\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\023\000\000\000\000\000\
\000\000\022\000\000\000\000\000\023\000\000\000\000\000\000\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\024\000\000\000\000\000\000\000\023\000\
\000\000\000\000\024\000\000\000\000\000\000\000\024\000\024\000\
\000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\025\000\000\000\000\000\000\000\024\000\000\000\000\000\
\025\000\000\000\000\000\000\000\025\000\025\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\020\000\
\000\000\000\000\000\000\025\000\000\000\000\000\020\000\000\000\
\000\000\000\000\020\000\020\000\000\000\020\000\020\000\021\000\
\000\000\000\000\000\000\020\000\020\000\000\000\021\000\000\000\
\000\000\020\000\021\000\021\000\000\000\021\000\021\000\026\000\
\000\000\027\000\000\000\021\000\021\000\000\000\026\000\000\000\
\027\000\021\000\026\000\026\000\027\000\027\000\000\000\000\000\
\000\000\000\000\000\000\026\000\026\000\027\000\027\000\032\000\
\033\000\026\000\000\000\027\000\034\000\035\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\000\000\000\000\031\000\000\000\066\000\032\000\
\033\000\000\000\000\000\000\000\034\000\035\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\032\000\033\000\000\000\000\000\045\000\034\000\
\035\000\000\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\032\000\033\000\000\000\
\000\000\000\000\034\000\035\000\000\000\046\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\032\000\033\000\000\000\000\000\000\000\034\000\035\000\000\000\
\000\000\064\000\000\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\032\000\033\000\000\000\000\000\000\000\
\034\000\035\000\000\000\000\000\000\000\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\032\000\033\000\
\000\000\000\000\000\000\034\000\035\000\000\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\032\000\
\033\000\000\000\000\000\000\000\034\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\039\000\040\000\041\000"

let yycheck = "\006\000\
\007\000\008\000\009\000\010\000\011\000\011\001\012\001\006\001\
\007\001\008\000\009\000\003\001\011\001\012\001\001\000\004\001\
\000\000\004\001\010\001\030\001\030\001\000\000\014\001\015\001\
\017\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\029\001\255\255\046\000\
\047\000\255\255\255\255\001\001\002\001\255\255\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\060\000\003\001\013\001\
\255\255\064\000\016\001\066\000\255\255\010\001\255\255\255\255\
\255\255\014\001\015\001\255\255\026\001\027\001\028\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\008\001\009\001\
\029\001\255\255\255\255\013\001\255\255\255\255\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\003\001\255\255\255\255\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\003\001\255\255\029\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\003\001\255\255\029\001\006\001\007\001\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\003\001\255\255\029\001\006\001\007\001\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\003\001\255\255\029\001\006\001\007\001\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\003\001\255\255\029\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\003\001\255\255\255\255\255\255\029\001\255\255\255\255\
\010\001\255\255\255\255\255\255\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\003\001\
\255\255\255\255\255\255\029\001\255\255\255\255\010\001\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\003\001\255\255\255\255\
\255\255\029\001\255\255\255\255\010\001\255\255\255\255\255\255\
\014\001\015\001\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\003\001\255\255\255\255\255\255\029\001\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\003\001\255\255\255\255\255\255\029\001\255\255\255\255\
\010\001\255\255\255\255\255\255\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\003\001\
\255\255\255\255\255\255\029\001\255\255\255\255\010\001\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\018\001\003\001\
\255\255\255\255\255\255\023\001\024\001\255\255\010\001\255\255\
\255\255\029\001\014\001\015\001\255\255\017\001\018\001\003\001\
\255\255\003\001\255\255\023\001\024\001\255\255\010\001\255\255\
\010\001\029\001\014\001\015\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\023\001\024\001\023\001\024\001\006\001\
\007\001\029\001\255\255\029\001\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\003\001\255\255\029\001\006\001\
\007\001\255\255\255\255\255\255\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\006\001\007\001\255\255\255\255\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\006\001\007\001\255\255\
\255\255\255\255\011\001\012\001\255\255\014\001\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\006\001\007\001\255\255\255\255\255\255\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\006\001\
\007\001\255\255\255\255\255\255\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001"

let yynames_const = "\
  CONST_UNIT\000\
  EOF\000\
  EOI\000\
  LPAREN\000\
  MINUS\000\
  PLUS\000\
  PRINT_INT\000\
  PRINT_NEWLINE\000\
  RPAREN\000\
  SLASH\000\
  STAR\000\
  IF\000\
  THEN\000\
  ELSE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  UMINUS\000\
  TRUE\000\
  FALSE\000\
  LET\000\
  IN\000\
  AFFECT\000\
  "

let yynames_block = "\
  CONST_INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    Obj.repr(
# 93 "parser.mly"
                ( _1 )
# 328 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
    ( [] )
# 334 "parser.ml"
               : 'instr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_seq) in
    Obj.repr(
# 100 "parser.mly"
    ( _1 :: _2 )
# 342 "parser.ml"
               : 'instr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
    ( Icompute _1 )
# 349 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
    ( Ilet (_2, _4) )
# 357 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 129 "parser.mly"
    ( _1 )
# 364 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 131 "parser.mly"
    ( mk_node (Eprint_newline _2) )
# 371 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 136 "parser.mly"
    ( mk_node (Eprint_int _2) )
# 378 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
    ( mk_node (Econst Cunit) )
# 384 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 150 "parser.mly"
( mk_node (Econst (Cint _1)) )
# 391 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
( mk_node (Econst (Cbool true)) )
# 397 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
( mk_node (Econst (Cbool false)) )
# 403 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
( _2 )
# 410 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
( mk_node (Eunop (Uminus, _2)) )
# 417 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
( mk_node (Ebinop (Badd, _1, _3)) )
# 425 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
( mk_node (Ebinop (Bsub, _1, _3)) )
# 433 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
( mk_node (Ebinop (Bmul, _1, _3)) )
# 441 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
( mk_node (Ebinop (Bdiv, _1, _3)) )
# 449 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
    ( mk_node (Eunop (Unot, _2)) )
# 456 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
    ( mk_node (Ebinop (Beq, _1, _3)) )
# 464 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
    ( mk_node (Ebinop (Bneq, _1, _3)) )
# 472 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
    ( mk_node (Ebinop (Blt, _1, _3)) )
# 480 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
    ( mk_node (Ebinop (Ble, _1, _3)) )
# 488 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
    ( mk_node (Ebinop (Bgt, _1, _3)) )
# 496 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
    ( mk_node (Ebinop (Bge, _1, _3)) )
# 504 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "parser.mly"
    ( mk_node (Ebinop (Band, _1, _3)) )
# 512 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
    ( mk_node (Ebinop (Bor, _1, _3)) )
# 520 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 204 "parser.mly"
    ( mk_node (Eif (_2, _4, _6)) )
# 529 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 207 "parser.mly"
    ( mk_node (Eident _1) )
# 536 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 210 "parser.mly"
    ( mk_node (Eletin (_2, _4, _6)) )
# 545 "parser.ml"
               : 'simple_expr))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
