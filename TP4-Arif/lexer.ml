# 1 "lexer.mll"
 

  open Lexing
  open Parser
  open Ast
  open Error

  (* Petite fonction utile pour la localisation des erreurs. *)
  let current_pos b =
    lexeme_start_p b,
    lexeme_end_p b


# 16 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\226\255\227\255\001\000\001\000\002\000\003\000\004\000\
    \005\000\000\000\000\000\001\000\240\255\241\255\242\255\243\255\
    \008\000\000\000\000\000\020\000\002\000\250\255\037\000\001\000\
    \255\255\001\000\003\000\001\000\000\000\013\000\009\000\006\000\
    \001\000\001\000\016\000\012\000\025\000\254\255\011\000\252\255\
    \249\255\253\255\027\000\012\000\029\000\246\255\021\000\238\255\
    \024\000\018\000\033\000\245\255\244\255\239\255\020\000\035\000\
    \237\255\021\000\236\255\235\255\234\255\232\255\230\255\229\255\
    \228\255\002\000\253\255\254\255\005\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\028\000\028\000\024\000\022\000\028\000\
    \028\000\028\000\028\000\028\000\255\255\255\255\255\255\255\255\
    \028\000\028\000\028\000\008\000\007\000\255\255\004\000\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\067\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\024\000\020\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\007\000\020\000\000\000\000\000\000\000\004\000\063\000\
    \022\000\021\000\012\000\015\000\068\000\014\000\069\000\013\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\016\000\006\000\008\000\005\000\062\000\
    \061\000\060\000\059\000\052\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\041\000\040\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
    \000\000\048\000\000\000\000\000\000\000\010\000\017\000\053\000\
    \042\000\011\000\026\000\032\000\054\000\034\000\009\000\057\000\
    \023\000\027\000\043\000\025\000\018\000\028\000\030\000\038\000\
    \033\000\035\000\036\000\031\000\003\000\064\000\037\000\039\000\
    \046\000\044\000\045\000\047\000\049\000\050\000\051\000\055\000\
    \056\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\255\255\255\255\255\255\000\000\004\000\
    \000\000\000\000\000\000\000\000\065\000\000\000\068\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\005\000\
    \006\000\007\000\008\000\016\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\022\000\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \255\255\017\000\255\255\255\255\255\255\000\000\000\000\011\000\
    \018\000\000\000\025\000\031\000\010\000\033\000\000\000\009\000\
    \000\000\026\000\018\000\023\000\000\000\027\000\029\000\030\000\
    \032\000\034\000\035\000\029\000\000\000\003\000\036\000\038\000\
    \042\000\043\000\044\000\046\000\048\000\049\000\050\000\054\000\
    \055\000\057\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\065\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 20 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 145 "lexer.ml"

  | 1 ->
# 24 "lexer.mll"
      ( PRINT_NEWLINE )
# 150 "lexer.ml"

  | 2 ->
# 26 "lexer.mll"
      ( CONST_UNIT )
# 155 "lexer.ml"

  | 3 ->
# 28 "lexer.mll"
      ( PRINT_INT )
# 160 "lexer.ml"

  | 4 ->
# 31 "lexer.mll"
      ( LPAREN )
# 165 "lexer.ml"

  | 5 ->
# 33 "lexer.mll"
      ( RPAREN )
# 170 "lexer.ml"

  | 6 ->
# 35 "lexer.mll"
      ( comment lexbuf )
# 175 "lexer.ml"

  | 7 ->
# 38 "lexer.mll"
      ( token lexbuf )
# 180 "lexer.ml"

  | 8 ->
let
# 39 "lexer.mll"
                  const
# 186 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 40 "lexer.mll"
      ( CONST_INT (int_of_string (const))  )
# 190 "lexer.ml"

  | 9 ->
# 43 "lexer.mll"
      ( TRUE )
# 195 "lexer.ml"

  | 10 ->
# 45 "lexer.mll"
      ( FALSE )
# 200 "lexer.ml"

  | 11 ->
# 48 "lexer.mll"
      ( EOI )
# 205 "lexer.ml"

  | 12 ->
# 51 "lexer.mll"
      ( PLUS )
# 210 "lexer.ml"

  | 13 ->
# 53 "lexer.mll"
      ( MINUS )
# 215 "lexer.ml"

  | 14 ->
# 55 "lexer.mll"
      ( SLASH )
# 220 "lexer.ml"

  | 15 ->
# 57 "lexer.mll"
      ( STAR )
# 225 "lexer.ml"

  | 16 ->
# 60 "lexer.mll"
      ( IF )
# 230 "lexer.ml"

  | 17 ->
# 62 "lexer.mll"
      ( THEN )
# 235 "lexer.ml"

  | 18 ->
# 64 "lexer.mll"
      ( ELSE )
# 240 "lexer.ml"

  | 19 ->
# 67 "lexer.mll"
      ( NOT )
# 245 "lexer.ml"

  | 20 ->
# 69 "lexer.mll"
      ( EQ )
# 250 "lexer.ml"

  | 21 ->
# 71 "lexer.mll"
      ( NEQ )
# 255 "lexer.ml"

  | 22 ->
# 73 "lexer.mll"
      ( LT )
# 260 "lexer.ml"

  | 23 ->
# 75 "lexer.mll"
      ( LE )
# 265 "lexer.ml"

  | 24 ->
# 77 "lexer.mll"
      ( GT )
# 270 "lexer.ml"

  | 25 ->
# 79 "lexer.mll"
      ( GE )
# 275 "lexer.ml"

  | 26 ->
# 81 "lexer.mll"
      ( AND )
# 280 "lexer.ml"

  | 27 ->
# 83 "lexer.mll"
      ( OR )
# 285 "lexer.ml"

  | 28 ->
# 95 "lexer.mll"
      ( error (Lexical_error (lexeme lexbuf)) (current_pos lexbuf) )
# 290 "lexer.ml"

  | 29 ->
# 98 "lexer.mll"
      ( EOF )
# 295 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 65
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 102 "lexer.mll"
           ( token lexbuf )
# 307 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
        ( comment lexbuf )
# 312 "lexer.ml"

  | 2 ->
# 104 "lexer.mll"
          ( failwith "Commentaire non termine" )
# 317 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

